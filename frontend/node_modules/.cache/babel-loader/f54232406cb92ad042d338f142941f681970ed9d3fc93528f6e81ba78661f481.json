{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashu LOQ\\\\Desktop\\\\Projects\\\\travel-Rogue-2\\\\frontend\\\\src\\\\contexts\\\\ThemeProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  theme: 'light',\n  setTheme: () => {},\n  toggleTheme: () => {},\n  isDark: false\n});\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [theme, setThemeState] = useState('light');\n  // Initialize theme from localStorage or system preference\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    let initialTheme = savedTheme || 'system';\n\n    // If theme is system or not set, detect system preference\n    if (initialTheme === 'system' || !savedTheme) {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      if (!savedTheme) {\n        initialTheme = 'system';\n      }\n      applyTheme(systemTheme);\n    } else {\n      applyTheme(initialTheme);\n    }\n    setThemeState(initialTheme);\n  }, []);\n\n  // Apply theme to document\n  const applyTheme = newTheme => {\n    const root = document.documentElement;\n    if (newTheme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n  };\n  // Set theme and persist to localStorage\n  const setTheme = newTheme => {\n    setThemeState(newTheme);\n    localStorage.setItem('theme', newTheme);\n    if (newTheme === 'system') {\n      // Apply system preference\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      applyTheme(systemTheme);\n    } else {\n      applyTheme(newTheme);\n    }\n  };\n\n  // Toggle between light and dark theme\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n  };\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      // Only update if theme is set to system\n      const currentTheme = localStorage.getItem('theme');\n      if (currentTheme === 'system' || !currentTheme) {\n        const newTheme = e.matches ? 'dark' : 'light';\n        applyTheme(newTheme);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const value = {\n    theme,\n    setTheme,\n    toggleTheme,\n    isDark: theme === 'dark' || theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"Jg7kX3tl44AHRN9Wplaj1WmEy+o=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","theme","setTheme","toggleTheme","isDark","useTheme","_s","context","Error","ThemeProvider","children","_s2","setThemeState","savedTheme","localStorage","getItem","initialTheme","systemTheme","window","matchMedia","matches","applyTheme","newTheme","root","document","documentElement","classList","add","remove","setItem","mediaQuery","handleChange","e","currentTheme","addEventListener","removeEventListener","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ashu LOQ/Desktop/Projects/travel-Rogue-2/frontend/src/contexts/ThemeProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext({\r\n  theme: 'light',\r\n  setTheme: () => {},\r\n  toggleTheme: () => {},\r\n  isDark: false,\r\n});\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [theme, setThemeState] = useState('light');\r\n  // Initialize theme from localStorage or system preference\r\n  useEffect(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    let initialTheme = savedTheme || 'system';\r\n    \r\n    // If theme is system or not set, detect system preference\r\n    if (initialTheme === 'system' || !savedTheme) {\r\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n      if (!savedTheme) {\r\n        initialTheme = 'system';\r\n      }\r\n      applyTheme(systemTheme);\r\n    } else {\r\n      applyTheme(initialTheme);\r\n    }\r\n    \r\n    setThemeState(initialTheme);\r\n  }, []);\r\n\r\n  // Apply theme to document\r\n  const applyTheme = (newTheme) => {\r\n    const root = document.documentElement;\r\n    \r\n    if (newTheme === 'dark') {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n  };\r\n  // Set theme and persist to localStorage\r\n  const setTheme = (newTheme) => {\r\n    setThemeState(newTheme);\r\n    localStorage.setItem('theme', newTheme);\r\n    \r\n    if (newTheme === 'system') {\r\n      // Apply system preference\r\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n      applyTheme(systemTheme);\r\n    } else {\r\n      applyTheme(newTheme);\r\n    }\r\n  };\r\n\r\n  // Toggle between light and dark theme\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n  };\r\n  // Listen for system theme changes\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    \r\n    const handleChange = (e) => {\r\n      // Only update if theme is set to system\r\n      const currentTheme = localStorage.getItem('theme');\r\n      if (currentTheme === 'system' || !currentTheme) {\r\n        const newTheme = e.matches ? 'dark' : 'light';\r\n        applyTheme(newTheme);\r\n      }\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    \r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, []);\r\n  const value = {\r\n    theme,\r\n    setTheme,\r\n    toggleTheme,\r\n    isDark: theme === 'dark' || (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches),\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}