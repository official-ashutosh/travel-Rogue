{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashu LOQ\\\\Desktop\\\\Projects\\\\travel-Rogue-2\\\\frontend\\\\src\\\\contexts\\\\MapProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContext = /*#__PURE__*/createContext({\n  map: null,\n  setMap: () => {},\n  markers: [],\n  setMarkers: () => {},\n  isLoaded: false,\n  loadError: null,\n  selectedLocation: null,\n  setSelectedLocation: () => {},\n  mapConfig: {\n    zoom: 10,\n    center: {\n      lat: 40.7128,\n      lng: -74.0060\n    } // Default to NYC\n  },\n  setMapConfig: () => {}\n});\nexport const useMap = () => {\n  _s();\n  const context = useContext(MapContext);\n  if (!context) {\n    throw new Error('useMap must be used within a MapProvider');\n  }\n  return context;\n};\n_s(useMap, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MapProvider = ({\n  children\n}) => {\n  _s2();\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [loadError, setLoadError] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [mapConfig, setMapConfig] = useState({\n    zoom: 10,\n    center: {\n      lat: 40.7128,\n      lng: -74.0060\n    } // Default to NYC\n  });\n\n  // Load Google Maps script\n  useEffect(() => {\n    const loadGoogleMaps = async () => {\n      if (window.google && window.google.maps) {\n        setIsLoaded(true);\n        return;\n      }\n      try {\n        const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n        if (!apiKey) {\n          throw new Error('Google Maps API key not found');\n        }\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          setIsLoaded(true);\n        };\n        script.onerror = () => {\n          setLoadError('Failed to load Google Maps');\n        };\n        document.head.appendChild(script);\n      } catch (error) {\n        setLoadError(error.message);\n      }\n    };\n    loadGoogleMaps();\n  }, []);\n\n  // Add marker to map\n  const addMarker = marker => {\n    setMarkers(prev => [...prev, marker]);\n  };\n\n  // Remove marker from map\n  const removeMarker = markerId => {\n    setMarkers(prev => prev.filter(marker => marker.id !== markerId));\n  };\n\n  // Clear all markers\n  const clearMarkers = () => {\n    setMarkers([]);\n  };\n\n  // Update map center and zoom\n  const updateMapConfig = newConfig => {\n    setMapConfig(prev => ({\n      ...prev,\n      ...newConfig\n    }));\n  };\n\n  // Get geocoded location\n  const geocodeLocation = async address => {\n    if (!window.google || !window.google.maps) {\n      throw new Error('Google Maps not loaded');\n    }\n    return new Promise((resolve, reject) => {\n      const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        address\n      }, (results, status) => {\n        if (status === 'OK' && results[0]) {\n          const location = results[0].geometry.location;\n          resolve({\n            lat: location.lat(),\n            lng: location.lng(),\n            address: results[0].formatted_address,\n            placeId: results[0].place_id\n          });\n        } else {\n          reject(new Error('Geocoding failed: ' + status));\n        }\n      });\n    });\n  };\n  const value = {\n    map,\n    setMap,\n    markers,\n    setMarkers,\n    addMarker,\n    removeMarker,\n    clearMarkers,\n    isLoaded,\n    loadError,\n    selectedLocation,\n    setSelectedLocation,\n    mapConfig,\n    setMapConfig: updateMapConfig,\n    geocodeLocation\n  };\n  return /*#__PURE__*/_jsxDEV(MapContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s2(MapProvider, \"JdgxyTVLyQNtw9xzd6divUWOtxk=\");\n_c = MapProvider;\nexport default MapProvider;\nvar _c;\n$RefreshReg$(_c, \"MapProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","MapContext","map","setMap","markers","setMarkers","isLoaded","loadError","selectedLocation","setSelectedLocation","mapConfig","zoom","center","lat","lng","setMapConfig","useMap","_s","context","Error","MapProvider","children","_s2","setIsLoaded","setLoadError","loadGoogleMaps","window","google","maps","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","script","document","createElement","src","async","defer","onload","onerror","head","appendChild","error","message","addMarker","marker","prev","removeMarker","markerId","filter","id","clearMarkers","updateMapConfig","newConfig","geocodeLocation","address","Promise","resolve","reject","geocoder","Geocoder","geocode","results","status","location","geometry","formatted_address","placeId","place_id","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ashu LOQ/Desktop/Projects/travel-Rogue-2/frontend/src/contexts/MapProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst MapContext = createContext({\r\n  map: null,\r\n  setMap: () => {},\r\n  markers: [],\r\n  setMarkers: () => {},\r\n  isLoaded: false,\r\n  loadError: null,\r\n  selectedLocation: null,\r\n  setSelectedLocation: () => {},\r\n  mapConfig: {\r\n    zoom: 10,\r\n    center: { lat: 40.7128, lng: -74.0060 }, // Default to NYC\r\n  },\r\n  setMapConfig: () => {},\r\n});\r\n\r\nexport const useMap = () => {\r\n  const context = useContext(MapContext);\r\n  if (!context) {\r\n    throw new Error('useMap must be used within a MapProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const MapProvider = ({ children }) => {\r\n  const [map, setMap] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [loadError, setLoadError] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [mapConfig, setMapConfig] = useState({\r\n    zoom: 10,\r\n    center: { lat: 40.7128, lng: -74.0060 }, // Default to NYC\r\n  });\r\n\r\n  // Load Google Maps script\r\n  useEffect(() => {\r\n    const loadGoogleMaps = async () => {\r\n      if (window.google && window.google.maps) {\r\n        setIsLoaded(true);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error('Google Maps API key not found');\r\n        }\r\n\r\n        const script = document.createElement('script');\r\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\r\n        script.async = true;\r\n        script.defer = true;\r\n\r\n        script.onload = () => {\r\n          setIsLoaded(true);\r\n        };\r\n\r\n        script.onerror = () => {\r\n          setLoadError('Failed to load Google Maps');\r\n        };\r\n\r\n        document.head.appendChild(script);\r\n      } catch (error) {\r\n        setLoadError(error.message);\r\n      }\r\n    };\r\n\r\n    loadGoogleMaps();\r\n  }, []);\r\n\r\n  // Add marker to map\r\n  const addMarker = (marker) => {\r\n    setMarkers(prev => [...prev, marker]);\r\n  };\r\n\r\n  // Remove marker from map\r\n  const removeMarker = (markerId) => {\r\n    setMarkers(prev => prev.filter(marker => marker.id !== markerId));\r\n  };\r\n\r\n  // Clear all markers\r\n  const clearMarkers = () => {\r\n    setMarkers([]);\r\n  };\r\n\r\n  // Update map center and zoom\r\n  const updateMapConfig = (newConfig) => {\r\n    setMapConfig(prev => ({ ...prev, ...newConfig }));\r\n  };\r\n\r\n  // Get geocoded location\r\n  const geocodeLocation = async (address) => {\r\n    if (!window.google || !window.google.maps) {\r\n      throw new Error('Google Maps not loaded');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const geocoder = new window.google.maps.Geocoder();\r\n      \r\n      geocoder.geocode({ address }, (results, status) => {\r\n        if (status === 'OK' && results[0]) {\r\n          const location = results[0].geometry.location;\r\n          resolve({\r\n            lat: location.lat(),\r\n            lng: location.lng(),\r\n            address: results[0].formatted_address,\r\n            placeId: results[0].place_id,\r\n          });\r\n        } else {\r\n          reject(new Error('Geocoding failed: ' + status));\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const value = {\r\n    map,\r\n    setMap,\r\n    markers,\r\n    setMarkers,\r\n    addMarker,\r\n    removeMarker,\r\n    clearMarkers,\r\n    isLoaded,\r\n    loadError,\r\n    selectedLocation,\r\n    setSelectedLocation,\r\n    mapConfig,\r\n    setMapConfig: updateMapConfig,\r\n    geocodeLocation,\r\n  };\r\n\r\n  return (\r\n    <MapContext.Provider value={value}>\r\n      {children}\r\n    </MapContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MapProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}